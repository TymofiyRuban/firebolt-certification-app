/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Transport from '../Transport/index.mjs'
import Events from '../Events/index.mjs'
import { registerEvents } from '../Events/index.mjs'
import Prop from '../Prop/index.mjs'

registerEvents('Privacy', [
  'allowACRCollectionChanged',
  'allowAppContentAdTargetingChanged',
  'allowCameraAnalyticsChanged',
  'allowPersonalizationChanged',
  'allowPrimaryBrowseAdTargetingChanged',
  'allowPrimaryContentAdTargetingChanged',
  'allowProductAnalyticsChanged',
  'allowRemoteDiagnosticsChanged',
  'allowResumePointsChanged',
  'allowUnentitledPersonalizationChanged',
  'allowUnentitledResumePointsChanged',
  'allowWatchHistoryChanged',
])

// onAllowACRCollectionChanged is accessed via listen('allowACRCollectionChanged, ...)

// onAllowAppContentAdTargetingChanged is accessed via listen('allowAppContentAdTargetingChanged, ...)

// onAllowCameraAnalyticsChanged is accessed via listen('allowCameraAnalyticsChanged, ...)

// onAllowPersonalizationChanged is accessed via listen('allowPersonalizationChanged, ...)

// onAllowPrimaryBrowseAdTargetingChanged is accessed via listen('allowPrimaryBrowseAdTargetingChanged, ...)

// onAllowPrimaryContentAdTargetingChanged is accessed via listen('allowPrimaryContentAdTargetingChanged, ...)

// onAllowProductAnalyticsChanged is accessed via listen('allowProductAnalyticsChanged, ...)

// onAllowRemoteDiagnosticsChanged is accessed via listen('allowRemoteDiagnosticsChanged, ...)

// onAllowResumePointsChanged is accessed via listen('allowResumePointsChanged, ...)

// onAllowUnentitledPersonalizationChanged is accessed via listen('allowUnentitledPersonalizationChanged, ...)

// onAllowUnentitledResumePointsChanged is accessed via listen('allowUnentitledResumePointsChanged, ...)

// onAllowWatchHistoryChanged is accessed via listen('allowWatchHistoryChanged, ...)

// Methods
function allowACRCollection() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowACRCollection',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowAppContentAdTargeting() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowAppContentAdTargeting',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowCameraAnalytics() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowCameraAnalytics',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowPersonalization() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowPersonalization',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowPrimaryBrowseAdTargeting() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowPrimaryBrowseAdTargeting',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowPrimaryContentAdTargeting() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowPrimaryContentAdTargeting',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowProductAnalytics() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowProductAnalytics',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowRemoteDiagnostics() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowRemoteDiagnostics',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowResumePoints() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowResumePoints',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowUnentitledPersonalization() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowUnentitledPersonalization',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowUnentitledResumePoints() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowUnentitledResumePoints',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function allowWatchHistory() {
  let callbackOrValue = arguments[0]
  let params = {}

  // x-subscriber-type: global
  if (arguments.length === 1 && typeof arguments[0] === 'function') {
    callbackOrValue = arguments[0]
    params = {}
  }

  return Prop.prop(
    'Privacy',
    'allowWatchHistory',
    params,
    callbackOrValue,
    false,
    false,
    0,
  )
}
function clear(...args) {
  return Events.clear('Privacy', ...args)
}

function listen(...args) {
  return Events.listen('Privacy', ...args)
}

function once(...args) {
  return Events.once('Privacy', ...args)
}

function settings() {
  const transforms = null

  return Transport.send('Privacy', 'settings', {}, transforms)
}

export default {
  Events: {
    ALLOW_RESUME_POINTS_CHANGED: 'allowResumePointsChanged',
    ALLOW_UNENTITLED_RESUME_POINTS_CHANGED:
      'allowUnentitledResumePointsChanged',
    ALLOW_WATCH_HISTORY_CHANGED: 'allowWatchHistoryChanged',
    ALLOW_PRODUCT_ANALYTICS_CHANGED: 'allowProductAnalyticsChanged',
    ALLOW_PERSONALIZATION_CHANGED: 'allowPersonalizationChanged',
    ALLOW_UNENTITLED_PERSONALIZATION_CHANGED:
      'allowUnentitledPersonalizationChanged',
    ALLOW_REMOTE_DIAGNOSTICS_CHANGED: 'allowRemoteDiagnosticsChanged',
    ALLOW_PRIMARY_CONTENT_AD_TARGETING_CHANGED:
      'allowPrimaryContentAdTargetingChanged',
    ALLOW_PRIMARY_BROWSE_AD_TARGETING_CHANGED:
      'allowPrimaryBrowseAdTargetingChanged',
    ALLOW_APP_CONTENT_AD_TARGETING_CHANGED: 'allowAppContentAdTargetingChanged',
    ALLOW_ACRCOLLECTION_CHANGED: 'allowACRCollectionChanged',
    ALLOW_CAMERA_ANALYTICS_CHANGED: 'allowCameraAnalyticsChanged',
  },

  allowACRCollection,
  allowAppContentAdTargeting,
  allowCameraAnalytics,
  allowPersonalization,
  allowPrimaryBrowseAdTargeting,
  allowPrimaryContentAdTargeting,
  allowProductAnalytics,
  allowRemoteDiagnostics,
  allowResumePoints,
  allowUnentitledPersonalization,
  allowUnentitledResumePoints,
  allowWatchHistory,
  clear,
  listen,
  once,
  settings,
}
